* Taming the Beast
Vanilla Emacs works in a variety of unfortunate ways. These defaults have grown a resistance to change over the decades.

We perform tweaking on Emacs minutiae, and simultaneously learn how Emacs is customized.

** Customizing Emacs
During initialization, Emacs attempts to load an /init/ file. This /init/ file is an Emacs Lisp file, and is processed top-down.

#+BEGIN_QUOTE
TIP: To load Emacs without a configuration file, run =emacs= with the command-line switch =-q=. This is useful when your configuration file breaks.
#+END_QUOTE

Emacs searches for /init/ files in several locations:

1. =~/.emacs=
2. =~/.emacs.el=
3. =~/.emacs.d/init.el=

I recommend the third option, =~/.emacs.d/init.el=. Having a dedicated =.emacs.d= folder for all Emacs-related config simplifies versioning.

If you haven't done so, create a blank file =init.el= in =~/.emacs.d=.

Next, I'll introduce your first few tweaks. To enable them, copy them into the =init.el= file.

*** Enabling Package Archives
[[https://melpa.org/#/][MELPA]] is the de-facto community package archive for Emacs. Because it does not ship with Emacs, we add it to =package-archives=. Similarly, we enable the Org-mode repository, which contains the most up-to-date version of =org-with-contrib=.

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize))
#+END_SRC

The more security conscious will note that packages are fetched using HTTP, instead of HTTPS. HTTPS, however, did not work for me. Refer [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][here]] for the reasons why you might want to do so, and how to do it.

*** Setting User Details
These variables are used in several parts of Emacs, including email.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "John Appleseed"
      user-mail-address "john@me.com")
#+END_SRC

*** UI Cruft
All these UI cruft take up precious screen estate, and should be removed.

#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC

*** Use-package
[[https://github.com/jwiegley/use-package][use-package]] is a macro which allows you to isolate package configuration in an organized and performant fashion. It is written by John Wiegley, the current Emacs maintainer. Before you move on, I recommend briefly browsing through the [[https://github.com/jwiegley/use-package][REAME]], to familiarize yourself with the macro syntax.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (defvar use-package-verbose t) 
  (require 'cl)
  (require 'use-package)
  (require 'bind-key)
  (require 'diminish)
  (setq use-package-always-ensure t))
#+END_SRC

Here, we set =use-package-always-ensure= to =true=, so missing packages will be installed automatically.

*** y/n
This is mostly personal preference, but I find y/n easier to type than yes/no.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Custom Files
Emacs comes with a built-in interface to customize all parts of Emacs. 

To persist the changes you've made, Emacs saves them (by default) into your =init.el= file, which can cause it to grow out of control.

I like to keep such customizations saved in a separate file.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

*** Backup Files
Backup files are important, but they litter your work directories with temporary files. Instead, with the following configuration temp files are created in the system temp directory.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

*** Overwriting Text
I'm used to having text being overwritten when highlighted. This usually saves me a keystroke.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode +1)
#+END_SRC

*** Default Font
Emacs looks for fonts installed in your file system. There are several ways to go about this, but I find the following the simplest and most reliable.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Fira Code-12"))
#+END_SRC

*** Tabs vs Spaces
I choose to set my tabs to 2 spaces, an increasingly common trend.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC

** Theming
There are a [[https://emacsthemes.com/][myriad]] of themes available for your picking. Here I list the better ones:

1. Zenburn
2. Solarized
3. Leuven (has an impressive org-mode theme)
4. Monokai
5. Tomorrow by Sanityinc
6. Ample

Usually, themes are named =foo-theme= in MELPA.

#+BEGIN_SRC emacs-lisp
(use-package ample-theme
  :init
  (load-theme 'ample-flat t))
#+END_SRC

At this point you should have quite a hefty amount of modification done. Remember to save your configuration directory into version control.

*** [[file:managing-the-workspace.org][Managing The Workspace]]                                         :noexport:
