* Thought-speed Editing
** Moving Text Around
[[Killing, Yanking and the CUA][Earlier]], I introduced the terminology Emacs uses for its clipboard system. I missed one vital piece, because I felt it was more appropriate to introduce here to keep things fresh.

Text that gets killed is erased, and then stored inside the *kill ring*. This stored text is then retrievable by *yanking*. There is only one kill ring, global to Emacs. 

A clear distinction has to be made between killing and deleting. Deleting text removes it from the buffer, but does not store it in the kill ring. Therefore extra caution has to be made when performing deletions.

*** Deleting Text
Here are the more useful text deletion commands:

#+ATTR_LATEX: :align lp{6cm}l
| Key     | Action                                                                 | Function                  |
|---------+------------------------------------------------------------------------+---------------------------|
| =M-\=     | Delete spaces and tabs around point                                    | =(delete-horizontal-space)= |
| =M-SPC=   | Delete spaces and tabs around point, leaving one space                 | =(just-one-space)=          |
| =C-x C-o= | Delete blank lines around current line                                 | =(delete-blank-lines)=      |
| =M-^=     | Join two lines by deleting intervening newline, along with indentation | =(delete-indentation)=      |

*** Killing Text
Here are the more useful text killing commands:

| Key     | Action                             | Function                 |
|---------+------------------------------------+--------------------------|
| =C-k=     | Kill line                          | =(kill-line)=              |
| =C-w=     | Kill region                        | =(kill-region)=            |
| =C-x DEL= | Kill back to beginning of sentence | =(backward-kill-sentence)= |
| =M-k=     | Kill to end of sentence            | =(kill-sentence)=          |

#+BEGIN_QUOTE
NOTE: By default, a sentence is delimited by a period, followed by *two* spaces. This is so that Emacs can differentiate between abbrieviations (M. J. for example), and actual sentences. It is recommended that you follow the two space convention, but if you insist, =(setq sentence-end-double-space nil)= should do the trick.
#+END_QUOTE

*** Yanking Text
Here are the more useful text killing commands:

| Key   | Action                                                        | Function           |
|-------+---------------------------------------------------------------+--------------------|
| =C-y=   | Yank last killed text                                         | =(yank)=             |
| =M-y=   | Replace last killed text with an earlier batch of killed text | =(yank-pop)=         |
| =M-w=   | Save region as last killed text without performing the kill   | =(kill-ring-save)=   |
| =C-M-w= | Append next kill to last batch of killed text                 | =(append-next-kill)= |

You can think of the kill ring as a stack, so you could continuously pop the kill ring to obtain earlier batches of killed text.

*** browse-kill-ring
I often defer to [[https://github.com/browse-kill-ring/browse-kill-ring][browse-kill-ring]] to access my kill-ring history. I bind it to =M-y=, replacing =(yank-pop)=. Try it out, and see if it suits your workflow.

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
  :bind ("M-y" . browse-kill-ring))
#+END_SRC

** Selecting Regions
*** The Mark, the Point and the Region
Many Emacs commands operate on an arbituary, contiguous part of the buffer, also known as the /region/. A region is delimited by two objects: the /mark/ and the /point/.

The point is where your cursor (keyboard) is currently placed. =C-SPC= creates a mark at the current position of point, activating it, as well as activating the region. The region is the text between the point and the mark, regardless of which direction. To deactivate the mark, simply quit with =C-g=.

Some common region commands include =kill-region=.

*** Rectangular Region
Rectangle commands operate on retangular areas of text. This may seem rather esoteric, but it occasionally presents itself as the correct tool.

=C-x SPC= creates a rectangular mark. The following presents commonly used rectangular commands, all prefixed with =C-x r=, operate on rectangular regions:

(Region-rectangle is short-formed as RR)

#+ATTR_LATEX: :align lp{7cm}l
| Key                | Action                                                          | Function                 |
|--------------------+-----------------------------------------------------------------+--------------------------|
| =C-x r k=            | Kill text in RR, saving its contents into last-killed rectangle | =(kill-rectangle)=         |
| =C-x r M-w=          | Save text in RR into kill-ring                                  | =(copy-rectangle-as-kill)= |
| =C-x r d=            | Delete text in RR                                               | =(delete-rectangle)=       |
| =C-x r y=            | Yank last killed rectangle                                      | =(yank-rectangle)=         |
| =C-x r c=            | Clear RR, replacing all text with spaces                        | =(clear-rectangle)=        |
| =C-x r t string RET= | Replace rectangle contents with string on each line             | =(string-rectangle)=       |

*** Expand Region
[[https://github.com/magnars/expand-region.el][expand-region]] is one of those packages that you can live without, but as you use it more often, you find yourself repeatedly going back to it. [[http://emacsrocks.com/e09.html][Here's]] a great overview of expand-region.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
#+END_SRC

** Zap-to-char
As an ex-vim user, I miss the =ct= and =dt= key dearly. Fret not, for what vim can do, emacs can do better.

=zap-up-to-char= does exactly what it says it does: it kills up to, but not including the ARGth occurrence of CHAR.

#+BEGIN_SRC emacs-lisp
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR."
  'interactive)

(bind-key* "M-z" 'zap-up-to-char)
#+END_SRC

Let's play with some examples:

#+BEGIN_VERSE
I think I love to eat pancakes and bananas.
#+END_VERSE

We begin from the start of the sentence. Now let's say we want to kill up to "think", I'd do =M-z t RET=. If I wanted to kill up to "to", then I provide an argument value of 2 to =zap-up-to-char= by pressing =M-2 M-z t RET=.

Remember that the text is /killed/, which means it gets saved into the kill ring and can be retrieved at a later point in time through yanking.

If you use [[Moving Within Visible Text][avy]], perhaps you'll find [[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]] to your liking. It uses the avy interface to select which letter to zap up till.

#+BEGIN_SRC emacs-lisp
(use-package zzz-to-char
  :bind (("M-z" . zzz-up-to-char)))
#+END_SRC

** Multiple-cursors
Multiple cursors would be familiar functionality to Sublime Text users. It's the perfect tool for many things, including editing variable names with visual feedback.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-M-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-n" . mc/mark-next-lines)))
#+END_SRC

/NOTE: I rebinded "C-n", which is not recommended!/

Most often, I use it in conjunction with =expand-region=: =expand-region= to select the keyword (variable names, for example), and use =C-c C-<= to select all instances of the variable, and simply type over it.

** Templating
[[https://github.com/joaotavora/yasnippet][yasnippet]] is a templating system for Emacs, allowing you to type an abbrieviation and automatically expand it into function templates. This feature is similar to the one offered by Textmate; in fact, the templating language is inherited from Textmate.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-global-mode yas-minor-mode
  :defer 5
  :init (add-hook 'after-init-hook 'yas-global-mode)
  :config (setq yas-snippet-dirs '("~/.emacs.d/snippets/")))
#+END_SRC

Andrea Crotti maintains an [[https://github.com/AndreaCrotti/yasnippet-snippets][official repo]] for yasnippet templates, which supports various languages and major-modes. I recommend forking the repository -- as I did -- and cloning it into a sub-directory under =~/.emacs.d=. This way, you can add your own templates and version control them. Above, I had set the =yas-snippet-dirs= to =~/.emacs.d/snippets=, so following that configuration:

#+BEGIN_SRC bash
git submodule add git@github.com:foobar/snippets.git ~/.emacs.d/snippets
#+END_SRC

** Autocompletion
Text completion in Emacs has Emacs users split between two major factions: autocomplete and company-mode. Both have similar feature sets, but it is generally argued that company-mode is more feature-rich.

The following snippet installs [[http://company-mode.github.io/][company-mode]].

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 5
  :diminish company-mode
  :init (progn
          (add-hook 'after-init-hook 'global-company-mode)
          (setq company-dabbrev-ignore-case nil
                company-dabbrev-code-ignore-case nil
                company-dabbrev-downcase nil
                company-idle-delay 0
                company-begin-commands '(self-insert-command)
                company-transformers '(company-sort-by-occurrence))
          (use-package company-quickhelp
            :config (company-quickhelp-mode 1))))
#+END_SRC

One thing that people miss from autocomplete is documentation popups. We add that functionality with [[https://github.com/expez/company-quickhelp][company-quickhelp]]. Another notable setting made was to set the delay for autocomplete to =0=. Play around with the numbers and see what you're comfortable with.

Note that company-mode is merely a framework for autocompletion. To enable autocompletion for various languages, you'd need to install various company backends.

*** 🢒 [[file:project-management.org][Project Management]]                                           :noexport:
